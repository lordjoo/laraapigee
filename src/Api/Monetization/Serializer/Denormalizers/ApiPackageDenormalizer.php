<?php

namespace Lordjoo\LaraApigee\Api\Monetization\Serializer\Denormalizers;

use Lordjoo\LaraApigee\Api\Monetization\Contracts\Entities\ApiPackageInterface;
use Lordjoo\LaraApigee\Api\Monetization\Entities\ApiPackage;
use Lordjoo\LaraApigee\Api\Monetization\Entities\ApiProduct;
use Lordjoo\LaraApigee\Api\Monetization\Serializer\NameConverter\ApiPackageNameConverter;
use Lordjoo\LaraApigee\Utility\Serializer\Denormalizers\ObjectDenormalizer;
use Symfony\Component\PropertyAccess\PropertyAccessorInterface;
use Symfony\Component\PropertyInfo\PropertyTypeExtractorInterface;
use Symfony\Component\Serializer\Mapping\Factory\ClassMetadataFactoryInterface;
use Symfony\Component\Serializer\NameConverter\NameConverterInterface;

class ApiPackageDenormalizer extends ObjectDenormalizer
{

    public function __construct(?ClassMetadataFactoryInterface $classMetadataFactory = null, ?NameConverterInterface $nameConverter = null, ?PropertyAccessorInterface $propertyAccessor = null, ?PropertyTypeExtractorInterface $propertyTypeExtractor = null)
    {
        $nameConverter = $nameConverter ?? new ApiPackageNameConverter();
        parent::__construct($classMetadataFactory, $nameConverter, $propertyAccessor, $propertyTypeExtractor);
    }


    public function denormalize($data, $type, $format = null, array $context = []): mixed
    {
        $data = parent::denormalize($data, $type, $format, $context); // TODO: Change the autogenerated stub

        // denormalize the apiProducts array
        $apiProducts = $data->getApiProducts();
        $apiProducts = array_map(function ($apiProduct) {
            return $this->serializer->denormalize($apiProduct, ApiProduct::class);
        }, $apiProducts);
        $data->setApiProducts($apiProducts);

        return $data;
    }

    public function supportsDenormalization($data, $type, $format = null, array $context = []): bool
    {
        // Do not apply this on array objects. ArrayDenormalizer takes care of them.
        if (str_ends_with($type, '[]')) {
            return false;
        }
        return ApiPackage::class === $type || $type instanceof ApiPackage;
    }

}
